# 1. Кількість замовлень покупцями по штатах 
brazil_map <- st_read('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson')
brazil_map <- st_make_valid(brazil_map)
brazil_map <- st_transform(brazil_map, crs = 4326)
brazil_map <- brazil_map[st_is_valid(brazil_map), ]

# Дані про населення штатів Бразилії за 2017 рік
population_data <- data.frame(
  customer_state = c("SP", "MG", "RJ", "BA", "RS", "PR", "PE", "CE", "PA", "SC", "MA", "GO", "AM", "PB", "ES", "RN", "AL", "MT", "PI", "DF", "MS", "SE", "RO", "TO", "AC", "AP", "RR"),
  population = c(45094866, 21119536, 16718956, 15344447, 11322895, 11320892, 9473266, 9020460, 8366628, 7001161, 7000229, 6778772, 4063614, 4025558, 4016356, 3507003, 3375823, 3344544, 3219257, 3039444, 2713147, 2288116, 1805788, 1550194, 829619, 797722, 522636)
)

# Обчислення відносної кількості замовлень
df_relative_orders <- df_clean %>%
  group_by(customer_state) %>%
  summarise(order_count = n_distinct(order_id)) %>%
  left_join(population_data, by = "customer_state") %>%
  mutate(orders_per_100k = (order_count / population) * 100000)

brazil_map <- brazil_map %>%
  left_join(df_relative_orders, by = c("sigla" = "customer_state"))

brazil_map$centroid <- st_point_on_surface(brazil_map$geometry)
pal <- colorNumeric(palette = "Purples", domain = brazil_map$orders_per_100k)

customer <- leaflet(data = brazil_map) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(orders_per_100k),
    color = "black",
    weight = 1,
    opacity = 0.7,
    fillOpacity = 0.7,
    popup = ~paste("Штат:", name, "<br>",
                   "Кількість замовлень:", order_count, "<br>",
                   "Населення:", format(population, big.mark = " "), "<br>",
                   "Замовлень на 100 тис. осіб:", round(orders_per_100k, 2)),
    highlight = highlightOptions(weight = 2, color = "white", fillOpacity = 0.7)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal,
    values = brazil_map$orders_per_100k,
    title = "Замовлення на 100 000 осіб"
  ) %>%
  addLabelOnlyMarkers(
    data = brazil_map,
    lng = ~st_coordinates(centroid)[,1],
    lat = ~st_coordinates(centroid)[,2],
    label = ~sigla,
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = "center",
      textOnly = TRUE,
      style = list(
        "color" = "black",
        "font-weight" = "bold",
        "font-size" = "14px"
      )
    )
  )

saveWidget(customer, "brazil_orders_customer.html", selfcontained = TRUE)
customer



# 2. Кількість замовлень, що відбулися з різних штатів продавців 
df_relative_orders <- df_clean %>%
  group_by(seller_state) %>%  # Заміна customer_state на seller_state
  summarise(order_count = n_distinct(order_id)) %>%
  right_join(population_data, by = c("seller_state" = "customer_state")) %>%  # Заміна customer_state на seller_state
  mutate(order_count = replace_na(order_count, 0),  # Заповнення NA значень нулями
         orders_per_100k = (order_count / population) * 100000)

brazil_map <- brazil_map %>%
  left_join(df_relative_orders, by = c("sigla" = "seller_state"))

brazil_map$centroid <- st_point_on_surface(brazil_map$geometry)
pal <- colorNumeric(palette = "RdPu", domain = brazil_map$orders_per_100k)

seller <- leaflet(data = brazil_map) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(orders_per_100k),
    color = "black",
    weight = 1,
    opacity = 0.7,
    fillOpacity = 0.7,
    popup = ~paste("Штат:", name, "<br>",
                   "Кількість замовлень:", order_count, "<br>",
                   "Населення:", format(population, big.mark = " "), "<br>",
                   "Замовлень на 100 тис. осіб:", round(orders_per_100k, 2)),
    highlight = highlightOptions(weight = 2, color = "white", fillOpacity = 0.7)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal,
    values = brazil_map$orders_per_100k,
    title = "Замовлення на 100 000 осіб"
  ) %>%
  addLabelOnlyMarkers(
    data = brazil_map,
    lng = ~st_coordinates(centroid)[,1],
    lat = ~st_coordinates(centroid)[,2],
    label = ~sigla,
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = "center",
      textOnly = TRUE,
      style = list(
        "color" = "black",
        "font-weight" = "bold",
        "font-size" = "14px"
      )
    )
  )

saveWidget(seller, "brazil_orders_seller.html", selfcontained = TRUE)
seller

# 3. Медіана часу доставки по штатах
df_clean$delivery_duration <- as.numeric(difftime(df_clean$order_delivered_customer_date,df_clean$order_purchase_timestamp, units = "days"))


state_delivery <- df_clean %>%
  group_by(customer_state) %>%
  summarise(median_delivery = median(delivery_duration, na.rm = TRUE))

brazil_map <- brazil_map %>%
  left_join(state_delivery, by = c("sigla" = "customer_state"))

brazil_map$centroid <- st_point_on_surface(brazil_map$geometry)
pal <- colorNumeric(palette = "Reds", domain = brazil_map$median_delivery)

delivery <- leaflet(data = brazil_map) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(median_delivery),
    color = "black",
    weight = 1,
    opacity = 0.7,
    fillOpacity = 0.7,
    popup = ~paste("Штат:", name, "<br>", "Медіана часу доставки:", round(median_delivery, 2), "днів"),
    highlight = highlightOptions(weight = 2, color = "white", fillOpacity = 0.7)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal,
    values = brazil_map$median_delivery,
    title = "Медіана часу доставки (дні)"
  )

delivery <- delivery %>%
  addLabelOnlyMarkers(
    data = brazil_map,
    lng = ~st_coordinates(centroid)[,1],
    lat = ~st_coordinates(centroid)[,2],
    label = ~sigla,  # Двобуквений код штату
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = "center",
      textOnly = TRUE,
      style = list(
        "color" = "black",
        "font-weight" = "bold",
        "font-size" = "14px"
      )
    )
  )

saveWidget(delivery, "brazil_median_delivery.html", selfcontained = TRUE)
delivery

# 4. Медіана вартості доставки по штатах
state_freight_value <- df_clean %>%
  group_by(customer_state) %>%
  summarise(median_freight_value = median(freight_value, na.rm = TRUE))

brazil_map <- brazil_map %>%
  left_join(state_freight_value, by = c("sigla" = "customer_state"))

pal <- colorNumeric(palette = "Greens", domain = brazil_map$median_freight_value)

freight_value_map <- leaflet(data = brazil_map) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(median_freight_value),
    color = "black",
    weight = 1,
    opacity = 0.7,
    fillOpacity = 0.7,
    popup = ~paste("Штат:", name, "<br>", "Медіана вартості доставки:", round(median_freight_value, 2), "USD"),
    highlight = highlightOptions(weight = 2, color = "white", fillOpacity = 0.7)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal,
    values = brazil_map$median_freight_value,
    title = "Медіана вартості доставки (USD)"
  )

freight_value_map <- freight_value_map %>%
  addLabelOnlyMarkers(
    data = brazil_map,
    lng = ~st_coordinates(centroid)[,1],
    lat = ~st_coordinates(centroid)[,2],
    label = ~sigla,  # Двобуквений код штату
    labelOptions = labelOptions(
      noHide = TRUE,
      direction = "center",
      textOnly = TRUE,
      style = list(
        "color" = "black",
        "font-weight" = "bold",
        "font-size" = "14px"
      )
    )
  )

saveWidget(freight_value_map, "brazil_median_freight_value.html", selfcontained = TRUE)
freight_value_map
# Медіана вартості замовлення по штатах
df_orders_customers <- df_orders %>%
  inner_join(df_customers, by = "customer_id")

df_order_items_customers <- df_items %>%
  inner_join(df_orders_customers, by = "order_id")

median_price_per_state <- df_order_items_customers %>%
  group_by(customer_state) %>%
  summarise(median_price = median(price, na.rm = TRUE)) %>%
  arrange(desc(median_price))

ggplot(median_price_per_state, aes(x = reorder(customer_state, median_price), y = median_price, fill = median_price)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  scale_fill_gradient(low = "#7395AE", high = "#B5EAD7") +
  labs(
    x = "Штат",
    y = "Медіанна вартість замовлення (BRL)"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15),
    legend.title = element_text(size = 15),
    legend.text = element_text(size = 10)
  )





# 5. Час доставки, штат покупця
ggplot(df_clean, aes(x = customer_state, y = log(actual_delivery_time))) +
  geom_boxplot() +
  labs(x = "Штат покупця", y = "ln(Фактичний час доставки у днях)") +
  theme_minimal() +
  theme(text = element_text(size = 15))


# 5. Вартість доставки, штат покупця
ggplot(df_clean, aes(x = customer_state, y = log1p(freight_value))) +
  geom_boxplot() +
  labs(x = "Штат покупця", y = "ln(Вартість доставки)") +
  theme_minimal() +
  theme(text = element_text(size = 15))



# 6. Кількість замовлень по місяцях
df$order_purchase_timestamp <- as.POSIXct(df$order_purchase_timestamp)

df <- df %>%
  mutate(order_month = as.Date(floor_date(order_purchase_timestamp, unit = "month")))

all_months <- data.frame(order_month = seq(as.Date("2016-10-01"), as.Date("2018-08-01"), by = "month"))

monthly_orders <- df %>%
  group_by(order_month) %>%
  summarise(order_count = n(), .groups = "drop") %>%
  right_join(all_months, by = "order_month") %>%
  mutate(order_count = ifelse(is.na(order_count), 0, order_count))

ggplot(data = monthly_orders, aes(x = order_month, y = order_count)) +
  geom_line(color = "purple", size = 1.5) +
  geom_point(color = "purple", size = 3) +
  scale_x_date(
    date_labels = "%Y-%m",
    date_breaks = "1 month",
    expand = c(0, 0)
  ) +
  labs(
    x = "Дата (Рік-місяць)",
    y = "Кількість замовлень"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15)
  )





# 7. Медіана вартості доставки замовлень по місяцях
merged <- inner_join(df_items, df_orders, by = "order_id")

merged$order_purchase_timestamp <- as.Date(merged$order_purchase_timestamp)

merged <- merged %>%
  mutate(month = floor_date(order_purchase_timestamp, unit = "month"))

median_freight_by_month <- merged %>%
  group_by(month) %>%
  summarise(median_freight = median(freight_value, na.rm = TRUE)) %>%
  ungroup()

median_freight_by_month <- median_freight_by_month %>%
  filter(month >= as.Date("2016-10-01") & month <= as.Date("2018-08-01"))

ggplot(median_freight_by_month, aes(x = month, y = median_freight)) +
  geom_line(color = "red", size = 1.5) +
  geom_point(color = "red", size = 3) +
  labs(x = "Місяць",
       y = "Медіанна вартість доставки (BRL)") +
  scale_x_date(
    date_labels = "%Y-%m",
    date_breaks = "1 month",
    limits = c(as.Date("2016-10-01"), as.Date("2018-08-01")),
    expand = c(0, 0)
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(size = 10),
        axis.title.x = element_text(size = 15),
        axis.title.y = element_text(size = 15))

# 7. Медіана днів доставки замовлень по місяцях
df$order_purchase_timestamp <- as.POSIXct(df$order_purchase_timestamp)
df$order_delivered_customer_date <- as.POSIXct(df$order_delivered_customer_date)

df <- df %>%
  mutate(
    delivery_duration = as.numeric(difftime(order_delivered_customer_date, order_purchase_timestamp, units = "days")),
    order_month = as.Date(floor_date(order_purchase_timestamp, unit = "month"))
  )

all_months <- data.frame(order_month = seq(as.Date("2016-10-01"), as.Date("2018-08-01"), by = "month"))

monthly_median_delivery <- df %>%
  group_by(order_month) %>%
  summarise(median_delivery = median(delivery_duration, na.rm = TRUE), .groups = "drop") %>%
  right_join(all_months, by = "order_month") %>%
  mutate(median_delivery = ifelse(is.na(median_delivery), 0, median_delivery))

ggplot(monthly_median_delivery, aes(x = order_month, y = median_delivery)) +
  geom_line(color = "blue", size = 1.5) +
  geom_point(color = "blue", size = 3) +
  scale_x_date(
    date_labels = "%Y-%m",
    date_breaks = "1 month",
    limits = c(as.Date("2016-10-01"), as.Date("2018-08-01")),
    expand = c(0, 0)
  ) +
  labs(
    x = "Дата (Рік-місяць)",
    y = "Медіанна доставка (дні)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15)
  )








# 8. Як змінювалась кількість нових покупців з часом
first_order <- df_orders %>%
  group_by(customer_id) %>%
  summarise(first_order_date = min(ymd_hms(order_purchase_timestamp))) %>%
  mutate(first_order_month = as.Date(floor_date(first_order_date, "month")))

new_customers_per_month <- first_order %>%
  count(first_order_month) %>%
  filter(first_order_month >= as.Date("2016-10-01") & first_order_month <= as.Date("2018-08-01")) %>%
  arrange(first_order_month)

ggplot(new_customers_per_month, aes(x = first_order_month, y = n)) +
  geom_line(color = "#6A0DAD", size = 1.5) +
  geom_point(color = "#6A0DAD", size = 3) +
  scale_x_date(
    date_labels = "%Y-%m",
    date_breaks = "1 month",
    limits = c(as.Date("2016-10-01"), as.Date("2018-08-01")),
    expand = c(0, 0)
  ) +
  labs(
    x = "Дата (Рік-місяць)",
    y = "Кількість нових клієнтів"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15)
  )
# 8. Як змінювалась кількість нових продавців з часом
df_sellers_orders <- df_items %>%
  inner_join(df_orders, by = "order_id")

df_sellers_orders <- df_sellers_orders %>%
  mutate(order_month = as.Date(floor_date(ymd_hms(order_purchase_timestamp), "month")))

sellers_per_month <- df_sellers_orders %>%
  group_by(order_month) %>%
  summarise(unique_sellers = n_distinct(seller_id)) %>%
  ungroup() %>%
  filter(order_month >= as.Date("2016-10-01") & order_month <= as.Date("2018-08-01")) %>%
  arrange(order_month)

ggplot(sellers_per_month, aes(x = order_month, y = unique_sellers)) +
  geom_line(color = "#007ACC", size = 1.5) +
  geom_point(color = "#007ACC", size = 3) +
  scale_y_continuous(breaks = seq(0, max(sellers_per_month$unique_sellers), by = 250)) +
  scale_x_date(
    date_labels = "%Y-%m",
    date_breaks = "1 month",
    limits = c(as.Date("2016-10-01"), as.Date("2018-08-01")),
    expand = c(0, 0)
  ) +
  labs(
    x = "Дата (Рік-місяць)",
    y = "Кількість нових продавців"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15)
  )

# 9. Як змінювався відсоток негативних відгуків з часом
df_reviews <- df_reviews %>%
  mutate(review_month = format(ymd(review_creation_date), "%Y-%m"))

low_reviews <- df_reviews %>%
  filter(review_score <= 2) %>%
  group_by(review_month) %>%
  summarise(low_count = n())

total_reviews <- df_reviews %>%
  group_by(review_month) %>%
  summarise(total_count = n())

low_review_rate <- left_join(low_reviews, total_reviews, by = "review_month") %>%
  mutate(negative_rate = (low_count / total_count) * 100) %>%
  filter(!is.na(review_month) & review_month != "NA")
ggplot(low_review_rate, aes(x = review_month, y = negative_rate, group = 1)) +
  geom_line(color = "gray50", size = 1) +
  geom_point(color = "gray50", size = 3) +
  scale_y_continuous(breaks = seq(0, max(low_review_rate$negative_rate, na.rm = TRUE), by = 5)) +  # Поділки Y з кроком 5%
  scale_x_discrete(drop = TRUE) +
  labs(
    x = "Дата (Рік-місяць)",
    y = "Відсоток негативних відгуків (%)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    axis.title.y = element_text(size = 15),
  )


# 11. Як змінюються оцінки залежно від затримки доставки
df_orders <- df_orders %>%
  mutate(delay = as.numeric(as.Date(order_delivered_customer_date) - as.Date(order_estimated_delivery_date)))

df_orders_reviews <- df_orders %>%
  inner_join(df_reviews, by = "order_id")

pastel_colors <- c("#AFCBFF", "#C9E4DE", "#E2C2B9", "#F2D388", "#D4A5A5")

ggplot(df_orders_reviews, aes(x = as.factor(review_score), y = delay, fill = as.factor(review_score))) +
  geom_boxplot() +
  scale_fill_manual(values = pastel_colors) +
  labs(
    x = "Оцінка",
    y = "Затримка доставки (дні)",
  ) +
  ylim(-20, 50) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 15),  # Розмір підпису осі X
    axis.title.y = element_text(size = 15),  # Розмір підпису осі Y
    axis.text.x = element_text(size = 15),
    axis.text.y = element_text(size = 15),
  )


# 12. Ціна доставки, ціна товару, вага
ggplot(df_clean, aes(x = log(price), y = log1p(freight_value), colour = log(product_weight_g))) +
  geom_point(alpha = 0.3) +
  scale_color_gradient(low = "yellow", high = "red") +
  labs(x = "ln(Ціна, R$)", y = "ln(Вартість доставки, R$)", color = "ln(Вага, г)") +
  theme(text = element_text(size = 15))


# 13. Ціна доставки, ціна товару, відстань
ggplot(df_clean, aes(x = log(price), y = log1p(freight_value), colour = distance_km)) +
  geom_point(alpha = 0.3) +
  scale_color_gradient(low = "lightblue", high = "darkblue") +
  labs(x = "ln(Ціна, R$)", y = "ln(Вартість доставки, R$)", color = "(Відстань, км)") +
  theme(text = element_text(size = 15))


# 14. Кореляція
ggcorr(df_clean %>%
         mutate(review_score = as.numeric(as.character(review_score))) %>%  # Перетворюємо фактор
         select(price, freight_value, review_score,
                product_name_lenght, product_description_lenght, product_photos_qty,
                product_weight_g, product_length_cm, product_height_cm,
                product_width_cm, actual_delivery_time, distance_km),
       method = c("pairwise", "spearman"),  # Використовуємо кореляцію Спірмена
       label = TRUE,                        # Додаємо числові значення кореляції
       label_size = 4,                       # Розмір шрифту міток
       hjust = 0.9,                          # Розташування міток
       layout.exp = 2) +                     # Оптимізація розміщення
  ggtitle("Кореляційна матриця")
